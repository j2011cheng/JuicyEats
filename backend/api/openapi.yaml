openapi: '3.0.3'

info:
  description: JuicyEats Backend
  version: 0.1.0
  title: JuicyEats Backend

servers:
  - url: http://localhost:3500/v0

paths:
  /authenticate:
    post:
      description: Authenticate login
      requestBody:
        description: Login details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionToken'
        401:
          description: Incorrect username or password
          content:
            application/json:
              schema:
                type: string

  /listings:
    get:
      description: GET all listings
      parameters:
        - in: query
          name: search
          description: Search keywords
          required: false
          schema:
            type: string
            pattern: '^(?:\S+ )*(?:\S+)$'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingList'
        400:
          description: Invalid search
        404:
          description: No items found
  
  /listing/{id}:
    get:
      description: GET listing by id
      parameters:
        - name: id
          in: path
          description: Listing id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        404:
          description: Listing not found
    patch:
      description: Find listing by id and update
      parameters:
        - name: id
          in: path
          description: Listing id
          required: true
          schema:
            type: string
      requestBody:
        description: Listing details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateListing'
      responses:
        200:
          description: Listing successfully updated
        400:
          description: Invalid listing update
        404:
          description: Listing not found
    delete:
      description: Delete listing by id
      parameters:
        - name: id
          in: path
          description: Listing id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Listing successfully deleted
        400:
          description: Invalid listing id
        404:
          description: Listing not found
  
  /listing:
    post:
      description: Create new listing
      requestBody:
        description: Listing details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewListing'
      security:
        - bearerAuth: []
      responses:
        201:
          description: Listing created
        400:
          description: Invalid listing

  /users:
    get:
      description: Get all users
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        404:
          description: No users found
    post:
      description: Create new user
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        201:
          description: User created
        400:
          description: Invalid user data
        409:
          description: Username already exists

  /users/{id}:
    get:
      description: Get user by id
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: USer not found
    patch:
      description: Update user by id
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      security:
        - bearerAuth: []
      responses:
        200:
          description: User updated
        400:
          description: invalid user
        404:
          description: User not found
    delete:
      description: Delete user
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful
        404:
          description: User not found
        

components:
  schemas:
    Listing:
      type: object
      properties:
        _id:
          type: object
        title:
          type: string
        price:
          type: number
          format: float
        available:
          type: boolean
      required:
        - _id
        - title
        - price
        - available
      additionalProperties: false

    ListingList:
      type: array
      items:
        $ref: '#/components/schemas/Listing'

    NewListing:
      type: object
      properties:
        title:
          type: string
        price:
          type: number
          format: float
        available:
          type: boolean
      required:
        - title
        - price
        - available
      additionalProperties: false

    UpdateListing:
      type: object
      properties:
        title:
          type: string
        price:
          type: number
          format: float
        available:
          type: boolean
      additionalProperties: false

    NewUser:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        roles:
          type: array
          items:
            type: string
        email:
          type: string
          format: email
        address:
          type: string
        phone:
          type: string
      required:
        - username
        - password
        - roles
      additionalProperties: false

    UpdateUser:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        roles:
          type: array
          items:
            type: string
        email:
          type: string
          format: email
        address:
          type: string
        phone:
          type: string
      additionalProperties: false
  
    User:
      type: object
      properties:
        _id:
          type: object
        username:
          type: string
        roles:
          type: array
          items:
            type: string
        email:
          type: string
          format: email
        address:
          type: string
        phone:
          type: string
      required:
        - _id
        - username
      additionalProperties: false

    UserList:
      type: array
      items:
        $ref: '#/components/schemas/User'
    
    LoginUser:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
       - username
       - password
      additionalProperties: false
    
    SessionToken:
      type: object
      properties:
        accessToken:
          type: string